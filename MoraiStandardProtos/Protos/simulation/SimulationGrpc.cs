// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/simulation/simulation.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation {
  /// <summary>
  ///*
  /// 시뮬레이션 시 사용하는 서비스
  /// </summary>
  public static partial class Simulation
  {
    static readonly string __ServiceName = "morai_sim_api.simulation.Simulation";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam> __Marshaller_morai_sim_api_simulation_StartParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Marshaller_morai_sim_api_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> __Marshaller_morai_sim_api_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode> __Marshaller_morai_sim_api_simulation_SyncMode = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value> __Marshaller_morai_sim_api_Int32Value = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp> __Marshaller_morai_sim_api_simulation_SyncTimestamp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> __Marshaller_morai_sim_api_Int64Value = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam> __Marshaller_morai_sim_api_simulation_SimulationModeParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam> __Marshaller_morai_sim_api_simulation_ResimRecordParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam> __Marshaller_morai_sim_api_simulation_ResimRecordStatusParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam> __Marshaller_morai_sim_api_simulation_ResimReplayInitParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam> __Marshaller_morai_sim_api_simulation_ResimReplayStatusParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam> __Marshaller_morai_sim_api_simulation_ResimReplayRangeParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam> __Marshaller_morai_sim_api_simulation_SendMessageParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_Start = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Start",
        __Marshaller_morai_sim_api_simulation_StartParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_Stop = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_morai_sim_api_StringValue,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_Pause = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Pause",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_Resume = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resume",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode> __Method_GetSynchronousMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSynchronousMode",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_simulation_SyncMode);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetSynchronousMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSynchronousMode",
        __Marshaller_morai_sim_api_simulation_SyncMode,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp> __Method_Tick = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Tick",
        __Marshaller_morai_sim_api_Int32Value,
        __Marshaller_morai_sim_api_simulation_SyncTimestamp);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> __Method_WaitForTick = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WaitForTick",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_Int64Value);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetSimulationMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSimulationMode",
        __Marshaller_morai_sim_api_simulation_SimulationModeParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetResimRecordMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetResimRecordMode",
        __Marshaller_morai_sim_api_simulation_ResimRecordParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam> __Method_GetResimRecordStatus = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetResimRecordStatus",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_simulation_ResimRecordStatusParam);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_ResimReplayInit = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResimReplayInit",
        __Marshaller_morai_sim_api_simulation_ResimReplayInitParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_ResimReplayStart = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResimReplayStart",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam> __Method_GetResimReplayStatus = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetResimReplayStatus",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_simulation_ResimReplayStatusParam);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_AddResimReplayRange = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddResimReplayRange",
        __Marshaller_morai_sim_api_simulation_ResimReplayRangeParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SendMessage = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_morai_sim_api_simulation_SendMessageParam,
        __Marshaller_morai_sim_api_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Simulation</summary>
    [grpc::BindServiceMethod(typeof(Simulation), "BindService")]
    public abstract partial class SimulationBase
    {
      /// <summary>
      ///* 
      /// 시뮬레이션 시작
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> Start(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 시뮬레이션 종료
      /// client_key 값으로 생성된 차량을 삭제함
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> Stop(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 시뮬레이션 일시 정지
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> Pause(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 시뮬레이션 재개
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> Resume(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 시뮬레이션 모드 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode> GetSynchronousMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 시뮬레이션 모드 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSynchronousMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 동기 모드일 때 설정한 횟수만큼 Tick 진행
      ///   unit : tick count
      ///   response : frame index
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp> Tick(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 비동기 모드일 때 사용하는 rpc로 다음 틱이 돌아오면 리턴
      ///   response : timestamp (msec)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> WaitForTick(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// Simulation Mode setting
      /// // 1. Normal, 2. Scenario runner, 3. Datagen, 4.....
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSimulationMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// Resim Record 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetResimRecordMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam> GetResimRecordStatus(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResimReplayInit(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResimReplayStart(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam> GetResimReplayStatus(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> AddResimReplayRange(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// General message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SendMessage(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Simulation</summary>
    public partial class SimulationClient : grpc::ClientBase<SimulationClient>
    {
      /// <summary>Creates a new client for Simulation</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SimulationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Simulation that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SimulationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SimulationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SimulationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///* 
      /// 시뮬레이션 시작
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Start(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Start(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* 
      /// 시뮬레이션 시작
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Start(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      ///* 
      /// 시뮬레이션 시작
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> StartAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* 
      /// 시뮬레이션 시작
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> StartAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 종료
      /// client_key 값으로 생성된 차량을 삭제함
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Stop(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 종료
      /// client_key 값으로 생성된 차량을 삭제함
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Stop(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 종료
      /// client_key 값으로 생성된 차량을 삭제함
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> StopAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 종료
      /// client_key 값으로 생성된 차량을 삭제함
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> StopAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 일시 정지
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Pause(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Pause(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 일시 정지
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Pause(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Pause, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 일시 정지
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> PauseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 일시 정지
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> PauseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Pause, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 재개
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Resume(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 재개
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result Resume(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resume, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 재개
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResumeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 재개
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResumeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resume, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode GetSynchronousMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSynchronousMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode GetSynchronousMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSynchronousMode, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode> GetSynchronousModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSynchronousModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode> GetSynchronousModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSynchronousMode, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSynchronousMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSynchronousMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSynchronousMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSynchronousMode, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSynchronousModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSynchronousModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSynchronousModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSynchronousMode, null, options, request);
      }
      /// <summary>
      ///*
      /// 동기 모드일 때 설정한 횟수만큼 Tick 진행
      ///   unit : tick count
      ///   response : frame index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp Tick(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Tick(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 동기 모드일 때 설정한 횟수만큼 Tick 진행
      ///   unit : tick count
      ///   response : frame index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp Tick(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Tick, null, options, request);
      }
      /// <summary>
      ///*
      /// 동기 모드일 때 설정한 횟수만큼 Tick 진행
      ///   unit : tick count
      ///   response : frame index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp> TickAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TickAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 동기 모드일 때 설정한 횟수만큼 Tick 진행
      ///   unit : tick count
      ///   response : frame index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp> TickAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Tick, null, options, request);
      }
      /// <summary>
      ///*
      /// 비동기 모드일 때 사용하는 rpc로 다음 틱이 돌아오면 리턴
      ///   response : timestamp (msec)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value WaitForTick(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitForTick(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 비동기 모드일 때 사용하는 rpc로 다음 틱이 돌아오면 리턴
      ///   response : timestamp (msec)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value WaitForTick(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WaitForTick, null, options, request);
      }
      /// <summary>
      ///*
      /// 비동기 모드일 때 사용하는 rpc로 다음 틱이 돌아오면 리턴
      ///   response : timestamp (msec)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> WaitForTickAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitForTickAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 비동기 모드일 때 사용하는 rpc로 다음 틱이 돌아오면 리턴
      ///   response : timestamp (msec)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> WaitForTickAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WaitForTick, null, options, request);
      }
      /// <summary>
      ///*
      /// Simulation Mode setting
      /// // 1. Normal, 2. Scenario runner, 3. Datagen, 4.....
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSimulationMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSimulationMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// Simulation Mode setting
      /// // 1. Normal, 2. Scenario runner, 3. Datagen, 4.....
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSimulationMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSimulationMode, null, options, request);
      }
      /// <summary>
      ///*
      /// Simulation Mode setting
      /// // 1. Normal, 2. Scenario runner, 3. Datagen, 4.....
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSimulationModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSimulationModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// Simulation Mode setting
      /// // 1. Normal, 2. Scenario runner, 3. Datagen, 4.....
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSimulationModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSimulationMode, null, options, request);
      }
      /// <summary>
      ///*
      /// Resim Record 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetResimRecordMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetResimRecordMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// Resim Record 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetResimRecordMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetResimRecordMode, null, options, request);
      }
      /// <summary>
      ///*
      /// Resim Record 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetResimRecordModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetResimRecordModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// Resim Record 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetResimRecordModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetResimRecordMode, null, options, request);
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam GetResimRecordStatus(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResimRecordStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam GetResimRecordStatus(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetResimRecordStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam> GetResimRecordStatusAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResimRecordStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam> GetResimRecordStatusAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetResimRecordStatus, null, options, request);
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ResimReplayInit(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResimReplayInit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ResimReplayInit(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResimReplayInit, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResimReplayInitAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResimReplayInitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResimReplayInitAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResimReplayInit, null, options, request);
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ResimReplayStart(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResimReplayStart(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ResimReplayStart(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResimReplayStart, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResimReplayStartAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResimReplayStartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ResimReplayStartAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResimReplayStart, null, options, request);
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam GetResimReplayStatus(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResimReplayStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam GetResimReplayStatus(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetResimReplayStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam> GetResimReplayStatusAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResimReplayStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam> GetResimReplayStatusAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetResimReplayStatus, null, options, request);
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result AddResimReplayRange(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResimReplayRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result AddResimReplayRange(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddResimReplayRange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> AddResimReplayRangeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddResimReplayRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> AddResimReplayRangeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddResimReplayRange, null, options, request);
      }
      /// <summary>
      ///*
      /// General message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SendMessage(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// General message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SendMessage(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      /// <summary>
      ///*
      /// General message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SendMessageAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// General message
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SendMessageAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SimulationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SimulationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SimulationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Start, serviceImpl.Start)
          .AddMethod(__Method_Stop, serviceImpl.Stop)
          .AddMethod(__Method_Pause, serviceImpl.Pause)
          .AddMethod(__Method_Resume, serviceImpl.Resume)
          .AddMethod(__Method_GetSynchronousMode, serviceImpl.GetSynchronousMode)
          .AddMethod(__Method_SetSynchronousMode, serviceImpl.SetSynchronousMode)
          .AddMethod(__Method_Tick, serviceImpl.Tick)
          .AddMethod(__Method_WaitForTick, serviceImpl.WaitForTick)
          .AddMethod(__Method_SetSimulationMode, serviceImpl.SetSimulationMode)
          .AddMethod(__Method_SetResimRecordMode, serviceImpl.SetResimRecordMode)
          .AddMethod(__Method_GetResimRecordStatus, serviceImpl.GetResimRecordStatus)
          .AddMethod(__Method_ResimReplayInit, serviceImpl.ResimReplayInit)
          .AddMethod(__Method_ResimReplayStart, serviceImpl.ResimReplayStart)
          .AddMethod(__Method_GetResimReplayStatus, serviceImpl.GetResimReplayStatus)
          .AddMethod(__Method_AddResimReplayRange, serviceImpl.AddResimReplayRange)
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SimulationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Start, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.StartParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.Start));
      serviceBinder.AddMethod(__Method_Stop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.Stop));
      serviceBinder.AddMethod(__Method_Pause, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.Pause));
      serviceBinder.AddMethod(__Method_Resume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.Resume));
      serviceBinder.AddMethod(__Method_GetSynchronousMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode>(serviceImpl.GetSynchronousMode));
      serviceBinder.AddMethod(__Method_SetSynchronousMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncMode, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetSynchronousMode));
      serviceBinder.AddMethod(__Method_Tick, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int32Value, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SyncTimestamp>(serviceImpl.Tick));
      serviceBinder.AddMethod(__Method_WaitForTick, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value>(serviceImpl.WaitForTick));
      serviceBinder.AddMethod(__Method_SetSimulationMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SimulationModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetSimulationMode));
      serviceBinder.AddMethod(__Method_SetResimRecordMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetResimRecordMode));
      serviceBinder.AddMethod(__Method_GetResimRecordStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimRecordStatusParam>(serviceImpl.GetResimRecordStatus));
      serviceBinder.AddMethod(__Method_ResimReplayInit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayInitParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.ResimReplayInit));
      serviceBinder.AddMethod(__Method_ResimReplayStart, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.ResimReplayStart));
      serviceBinder.AddMethod(__Method_GetResimReplayStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayStatusParam>(serviceImpl.GetResimReplayStatus));
      serviceBinder.AddMethod(__Method_AddResimReplayRange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.ResimReplayRangeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.AddResimReplayRange));
      serviceBinder.AddMethod(__Method_SendMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulation.SendMessageParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SendMessage));
    }

  }
}
#endregion
