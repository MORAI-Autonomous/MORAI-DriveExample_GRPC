// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/actor/actor.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor {
  /// <summary>
  ///*
  /// Actor (차량, 보행자, 장애물) 관련 서비스
  /// </summary>
  public static partial class Actor
  {
    static readonly string __ServiceName = "morai_sim_api.actor.Actor";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam> __Marshaller_morai_sim_api_actor_VehicleSpawnParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam> __Marshaller_morai_sim_api_actor_PedestrianSpawnParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam> __Marshaller_morai_sim_api_actor_ObstacleSpawnParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo> __Marshaller_morai_sim_api_ObjectInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Marshaller_morai_sim_api_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd> __Marshaller_morai_sim_api_actor_VehicleCtrlCmd = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd> __Marshaller_morai_sim_api_actor_PedestrianCtrlCmd = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd> __Marshaller_morai_sim_api_actor_ObstacleCtrlCmd = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState> __Marshaller_morai_sim_api_actor_ActorState = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter> __Marshaller_morai_sim_api_actor_GetAllActorsFilter = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates> __Marshaller_morai_sim_api_actor_ActorStates = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec> __Marshaller_morai_sim_api_actor_VehicleSpec = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting> __Marshaller_morai_sim_api_actor_NetworkProtocolSetting = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode> __Marshaller_morai_sim_api_actor_CurVehicleControlMode = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale> __Marshaller_morai_sim_api_actor_ActorScale = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam> __Marshaller_morai_sim_api_actor_SetTransformParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam> __Marshaller_morai_sim_api_actor_AnimationParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo> __Marshaller_morai_sim_api_actor_TrainSignalLightInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor> __Marshaller_morai_sim_api_actor_EnableActor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam> __Marshaller_morai_sim_api_actor_SetVelocityParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter> __Marshaller_morai_sim_api_actor_VehicleLimiter = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer> __Marshaller_morai_sim_api_actor_VehicleDynamicsSteer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit> __Marshaller_morai_sim_api_actor_VehicleDynamicsSpeedLimit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass> __Marshaller_morai_sim_api_actor_VehicleDynamicsMass = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset> __Marshaller_morai_sim_api_actor_VehiclePathOffset = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance> __Marshaller_morai_sim_api_actor_VehicleDisturbance = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection> __Marshaller_morai_sim_api_actor_VehicleFaultInjection = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute> __Marshaller_morai_sim_api_actor_VehicleRoute = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination> __Marshaller_morai_sim_api_actor_VehicleDestination = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl> __Marshaller_morai_sim_api_actor_EgoCruiseControl = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig> __Marshaller_morai_sim_api_actor_NetworkConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer> __Marshaller_morai_sim_api_actor_VehicleSteer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam> __Marshaller_morai_sim_api_actor_VehicleControlModeParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear> __Marshaller_morai_sim_api_actor_VehicleGear = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight> __Marshaller_morai_sim_api_actor_VehicleTailLight = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo> __Marshaller_morai_sim_api_actor_PedestrianWaypointInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SpawnVehicle = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpawnVehicle",
        __Marshaller_morai_sim_api_actor_VehicleSpawnParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SpawnPedestrian = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpawnPedestrian",
        __Marshaller_morai_sim_api_actor_PedestrianSpawnParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SpawnObstacle = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpawnObstacle",
        __Marshaller_morai_sim_api_actor_ObstacleSpawnParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_DestroyActor = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DestroyActor",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_DestroyAllActors = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DestroyAllActors",
        __Marshaller_morai_sim_api_StringValue,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_ControlVehicle = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControlVehicle",
        __Marshaller_morai_sim_api_actor_VehicleCtrlCmd,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_ControlPedestrian = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControlPedestrian",
        __Marshaller_morai_sim_api_actor_PedestrianCtrlCmd,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_ControlObstacle = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControlObstacle",
        __Marshaller_morai_sim_api_actor_ObstacleCtrlCmd,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState> __Method_GetActorState = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActorState",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_actor_ActorState);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates> __Method_GetAllActorsState = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllActorsState",
        __Marshaller_morai_sim_api_actor_GetAllActorsFilter,
        __Marshaller_morai_sim_api_actor_ActorStates);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec> __Method_GetVehicleSpec = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicleSpec",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_actor_VehicleSpec);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Method_GetOptionName = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOptionName",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_StringValue);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting> __Method_GetVehicleNetworkSetting = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicleNetworkSetting",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_actor_NetworkProtocolSetting);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode> __Method_GetVehicleControlMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicleControlMode",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_actor_CurVehicleControlMode);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetScale = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetScale",
        __Marshaller_morai_sim_api_actor_ActorScale,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetTransform = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTransform",
        __Marshaller_morai_sim_api_actor_SetTransformParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetObstacleAnimation = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetObstacleAnimation",
        __Marshaller_morai_sim_api_actor_AnimationParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetTrainSignalLight = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTrainSignalLight",
        __Marshaller_morai_sim_api_actor_TrainSignalLightInfo,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetPause = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPause",
        __Marshaller_morai_sim_api_actor_EnableActor,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetAI = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAI",
        __Marshaller_morai_sim_api_actor_EnableActor,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetPhysics = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPhysics",
        __Marshaller_morai_sim_api_actor_EnableActor,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVelocity = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVelocity",
        __Marshaller_morai_sim_api_actor_SetVelocityParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleLimiter = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleLimiter",
        __Marshaller_morai_sim_api_actor_VehicleLimiter,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleDynamicsSteer = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleDynamicsSteer",
        __Marshaller_morai_sim_api_actor_VehicleDynamicsSteer,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleDynamicsSpeedLimit = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleDynamicsSpeedLimit",
        __Marshaller_morai_sim_api_actor_VehicleDynamicsSpeedLimit,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleDynamicsMass = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleDynamicsMass",
        __Marshaller_morai_sim_api_actor_VehicleDynamicsMass,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehiclePathOffset = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehiclePathOffset",
        __Marshaller_morai_sim_api_actor_VehiclePathOffset,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleDisturbance = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleDisturbance",
        __Marshaller_morai_sim_api_actor_VehicleDisturbance,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleFaultInjection = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleFaultInjection",
        __Marshaller_morai_sim_api_actor_VehicleFaultInjection,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleRoute = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleRoute",
        __Marshaller_morai_sim_api_actor_VehicleRoute,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleDestination = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleDestination",
        __Marshaller_morai_sim_api_actor_VehicleDestination,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleEgoCruise = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleEgoCruise",
        __Marshaller_morai_sim_api_actor_EgoCruiseControl,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleNetwork = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleNetwork",
        __Marshaller_morai_sim_api_actor_NetworkConfig,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleSteer = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleSteer",
        __Marshaller_morai_sim_api_actor_VehicleSteer,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleControlMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleControlMode",
        __Marshaller_morai_sim_api_actor_VehicleControlModeParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleGear = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleGear",
        __Marshaller_morai_sim_api_actor_VehicleGear,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVehicleTailLight = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVehicleTailLight",
        __Marshaller_morai_sim_api_actor_VehicleTailLight,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetPedestrianWaypoint = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPedestrianWaypoint",
        __Marshaller_morai_sim_api_actor_PedestrianWaypointInfo,
        __Marshaller_morai_sim_api_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Actor</summary>
    [grpc::BindServiceMethod(typeof(Actor), "BindService")]
    public abstract partial class ActorBase
    {
      /// <summary>
      /// 차량 스폰
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnVehicle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 보행자 스폰
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnPedestrian(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 장애물 스폰
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnObstacle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 선택한 Actor 제거
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> DestroyActor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 모든 Actor 제거
      /// Client key를 넣으면 해당 key로 관리하는 actor만,
      /// 비어있는 문자열을 넣으면 모든 actor를 제거한다.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> DestroyAllActors(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량 제어
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlVehicle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 보행자 제어
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlPedestrian(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 오브젝트 제어
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlObstacle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 특정 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState> GetActorState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 모든 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates> GetAllActorsState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량 제원
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec> GetVehicleSpec(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 객체의 옵션명 반환
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetOptionName(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량 네트워크 설정 조회 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting> GetVehicleNetworkSetting(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 제어 모드 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode> GetVehicleControlMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Scale 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetScale(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Transform 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTransform(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Animation On/Off
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetObstacleAnimation(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 기차 신호등 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTrainSignalLight(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Pause/Resume
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPause(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AI On/Off
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetAI(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Physics On/Off
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPhysics(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set Velocity
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVelocity(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Limiter 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleLimiter(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Dynamics steer 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsSteer(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Dynamics 최대 속도 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsSpeedLimit(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Dynamics mass 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsMass(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Path offset 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehiclePathOffset(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Disturbance 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDisturbance(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Fault injection 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleFaultInjection(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Route 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleRoute(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Destination 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDestination(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ego 차량의 Cruise 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleEgoCruise(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Network 설정 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleNetwork(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 Steer 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleSteer(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 제어 모드 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleControlMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 기어 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleGear(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 차량의 후미등 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleTailLight(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Spawn한 보행자의 이동 경로 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPedestrianWaypoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Actor</summary>
    public partial class ActorClient : grpc::ClientBase<ActorClient>
    {
      /// <summary>Creates a new client for Actor</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ActorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Actor that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ActorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ActorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ActorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 차량 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SpawnVehicle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpawnVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SpawnVehicle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpawnVehicle, null, options, request);
      }
      /// <summary>
      /// 차량 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnVehicleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpawnVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnVehicleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpawnVehicle, null, options, request);
      }
      /// <summary>
      /// 보행자 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SpawnPedestrian(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpawnPedestrian(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 보행자 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SpawnPedestrian(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpawnPedestrian, null, options, request);
      }
      /// <summary>
      /// 보행자 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnPedestrianAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpawnPedestrianAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 보행자 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnPedestrianAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpawnPedestrian, null, options, request);
      }
      /// <summary>
      /// 장애물 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SpawnObstacle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpawnObstacle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 장애물 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SpawnObstacle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpawnObstacle, null, options, request);
      }
      /// <summary>
      /// 장애물 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnObstacleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpawnObstacleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 장애물 스폰
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SpawnObstacleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpawnObstacle, null, options, request);
      }
      /// <summary>
      /// 선택한 Actor 제거
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result DestroyActor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DestroyActor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 선택한 Actor 제거
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result DestroyActor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DestroyActor, null, options, request);
      }
      /// <summary>
      /// 선택한 Actor 제거
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> DestroyActorAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DestroyActorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 선택한 Actor 제거
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> DestroyActorAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DestroyActor, null, options, request);
      }
      /// <summary>
      ///*
      /// 모든 Actor 제거
      /// Client key를 넣으면 해당 key로 관리하는 actor만,
      /// 비어있는 문자열을 넣으면 모든 actor를 제거한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result DestroyAllActors(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DestroyAllActors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 모든 Actor 제거
      /// Client key를 넣으면 해당 key로 관리하는 actor만,
      /// 비어있는 문자열을 넣으면 모든 actor를 제거한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result DestroyAllActors(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DestroyAllActors, null, options, request);
      }
      /// <summary>
      ///*
      /// 모든 Actor 제거
      /// Client key를 넣으면 해당 key로 관리하는 actor만,
      /// 비어있는 문자열을 넣으면 모든 actor를 제거한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> DestroyAllActorsAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DestroyAllActorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 모든 Actor 제거
      /// Client key를 넣으면 해당 key로 관리하는 actor만,
      /// 비어있는 문자열을 넣으면 모든 actor를 제거한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> DestroyAllActorsAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DestroyAllActors, null, options, request);
      }
      /// <summary>
      /// 차량 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ControlVehicle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ControlVehicle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControlVehicle, null, options, request);
      }
      /// <summary>
      /// 차량 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlVehicleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlVehicleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControlVehicle, null, options, request);
      }
      /// <summary>
      /// 보행자 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ControlPedestrian(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlPedestrian(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 보행자 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ControlPedestrian(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControlPedestrian, null, options, request);
      }
      /// <summary>
      /// 보행자 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlPedestrianAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlPedestrianAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 보행자 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlPedestrianAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControlPedestrian, null, options, request);
      }
      /// <summary>
      /// 오브젝트 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ControlObstacle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlObstacle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 오브젝트 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result ControlObstacle(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControlObstacle, null, options, request);
      }
      /// <summary>
      /// 오브젝트 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlObstacleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlObstacleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 오브젝트 제어
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> ControlObstacleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControlObstacle, null, options, request);
      }
      /// <summary>
      /// 특정 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState GetActorState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActorState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 특정 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState GetActorState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActorState, null, options, request);
      }
      /// <summary>
      /// 특정 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState> GetActorStateAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActorStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 특정 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState> GetActorStateAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActorState, null, options, request);
      }
      /// <summary>
      /// 모든 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates GetAllActorsState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllActorsState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 모든 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates GetAllActorsState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllActorsState, null, options, request);
      }
      /// <summary>
      /// 모든 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates> GetAllActorsStateAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllActorsStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 모든 Actor의 상태를 수신
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates> GetAllActorsStateAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllActorsState, null, options, request);
      }
      /// <summary>
      /// 차량 제원
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec GetVehicleSpec(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleSpec(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 제원
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec GetVehicleSpec(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicleSpec, null, options, request);
      }
      /// <summary>
      /// 차량 제원
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec> GetVehicleSpecAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleSpecAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 제원
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec> GetVehicleSpecAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicleSpec, null, options, request);
      }
      /// <summary>
      /// 객체의 옵션명 반환
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue GetOptionName(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOptionName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 객체의 옵션명 반환
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue GetOptionName(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOptionName, null, options, request);
      }
      /// <summary>
      /// 객체의 옵션명 반환
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetOptionNameAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOptionNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 객체의 옵션명 반환
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetOptionNameAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOptionName, null, options, request);
      }
      /// <summary>
      /// 차량 네트워크 설정 조회 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting GetVehicleNetworkSetting(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleNetworkSetting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 네트워크 설정 조회 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting GetVehicleNetworkSetting(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicleNetworkSetting, null, options, request);
      }
      /// <summary>
      /// 차량 네트워크 설정 조회 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting> GetVehicleNetworkSettingAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleNetworkSettingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량 네트워크 설정 조회 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting> GetVehicleNetworkSettingAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicleNetworkSetting, null, options, request);
      }
      /// <summary>
      /// 차량의 제어 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode GetVehicleControlMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleControlMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 제어 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode GetVehicleControlMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicleControlMode, null, options, request);
      }
      /// <summary>
      /// 차량의 제어 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode> GetVehicleControlModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleControlModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 제어 모드 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode> GetVehicleControlModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicleControlMode, null, options, request);
      }
      /// <summary>
      /// Scale 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetScale(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetScale(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Scale 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetScale(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetScale, null, options, request);
      }
      /// <summary>
      /// Scale 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetScaleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetScaleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Scale 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetScaleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetScale, null, options, request);
      }
      /// <summary>
      /// Transform 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTransform(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTransform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transform 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTransform(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTransform, null, options, request);
      }
      /// <summary>
      /// Transform 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTransformAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTransformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transform 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTransformAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTransform, null, options, request);
      }
      /// <summary>
      /// Animation On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetObstacleAnimation(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetObstacleAnimation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Animation On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetObstacleAnimation(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetObstacleAnimation, null, options, request);
      }
      /// <summary>
      /// Animation On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetObstacleAnimationAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetObstacleAnimationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Animation On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetObstacleAnimationAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetObstacleAnimation, null, options, request);
      }
      /// <summary>
      /// 기차 신호등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTrainSignalLight(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTrainSignalLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 기차 신호등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTrainSignalLight(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTrainSignalLight, null, options, request);
      }
      /// <summary>
      /// 기차 신호등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTrainSignalLightAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTrainSignalLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 기차 신호등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTrainSignalLightAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTrainSignalLight, null, options, request);
      }
      /// <summary>
      /// Pause/Resume
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetPause(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPause(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pause/Resume
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetPause(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPause, null, options, request);
      }
      /// <summary>
      /// Pause/Resume
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPauseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPauseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pause/Resume
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPauseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPause, null, options, request);
      }
      /// <summary>
      /// AI On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetAI(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAI(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AI On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetAI(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAI, null, options, request);
      }
      /// <summary>
      /// AI On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetAIAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAIAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AI On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetAIAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAI, null, options, request);
      }
      /// <summary>
      /// Physics On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetPhysics(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPhysics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Physics On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetPhysics(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPhysics, null, options, request);
      }
      /// <summary>
      /// Physics On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPhysicsAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPhysicsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Physics On/Off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPhysicsAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPhysics, null, options, request);
      }
      /// <summary>
      /// Set Velocity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVelocity(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVelocity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set Velocity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVelocity(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVelocity, null, options, request);
      }
      /// <summary>
      /// Set Velocity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVelocityAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVelocityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set Velocity
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVelocityAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVelocity, null, options, request);
      }
      /// <summary>
      /// 차량의 Limiter 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleLimiter(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleLimiter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Limiter 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleLimiter(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleLimiter, null, options, request);
      }
      /// <summary>
      /// 차량의 Limiter 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleLimiterAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleLimiterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Limiter 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleLimiterAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleLimiter, null, options, request);
      }
      /// <summary>
      /// 차량의 Dynamics steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDynamicsSteer(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDynamicsSteer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Dynamics steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDynamicsSteer(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleDynamicsSteer, null, options, request);
      }
      /// <summary>
      /// 차량의 Dynamics steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsSteerAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDynamicsSteerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Dynamics steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsSteerAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleDynamicsSteer, null, options, request);
      }
      /// <summary>
      /// 차량의 Dynamics 최대 속도 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDynamicsSpeedLimit(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDynamicsSpeedLimit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Dynamics 최대 속도 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDynamicsSpeedLimit(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleDynamicsSpeedLimit, null, options, request);
      }
      /// <summary>
      /// 차량의 Dynamics 최대 속도 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsSpeedLimitAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDynamicsSpeedLimitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Dynamics 최대 속도 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsSpeedLimitAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleDynamicsSpeedLimit, null, options, request);
      }
      /// <summary>
      /// 차량의 Dynamics mass 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDynamicsMass(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDynamicsMass(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Dynamics mass 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDynamicsMass(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleDynamicsMass, null, options, request);
      }
      /// <summary>
      /// 차량의 Dynamics mass 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsMassAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDynamicsMassAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Dynamics mass 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDynamicsMassAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleDynamicsMass, null, options, request);
      }
      /// <summary>
      /// 차량의 Path offset 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehiclePathOffset(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehiclePathOffset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Path offset 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehiclePathOffset(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehiclePathOffset, null, options, request);
      }
      /// <summary>
      /// 차량의 Path offset 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehiclePathOffsetAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehiclePathOffsetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Path offset 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehiclePathOffsetAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehiclePathOffset, null, options, request);
      }
      /// <summary>
      /// 차량의 Disturbance 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDisturbance(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDisturbance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Disturbance 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDisturbance(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleDisturbance, null, options, request);
      }
      /// <summary>
      /// 차량의 Disturbance 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDisturbanceAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDisturbanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Disturbance 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDisturbanceAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleDisturbance, null, options, request);
      }
      /// <summary>
      /// 차량의 Fault injection 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleFaultInjection(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleFaultInjection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Fault injection 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleFaultInjection(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleFaultInjection, null, options, request);
      }
      /// <summary>
      /// 차량의 Fault injection 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleFaultInjectionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleFaultInjectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Fault injection 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleFaultInjectionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleFaultInjection, null, options, request);
      }
      /// <summary>
      /// 차량의 Route 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleRoute(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleRoute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Route 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleRoute(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleRoute, null, options, request);
      }
      /// <summary>
      /// 차량의 Route 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleRouteAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleRouteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Route 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleRouteAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleRoute, null, options, request);
      }
      /// <summary>
      /// 차량의 Destination 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDestination(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDestination(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Destination 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleDestination(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleDestination, null, options, request);
      }
      /// <summary>
      /// 차량의 Destination 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDestinationAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleDestinationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Destination 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleDestinationAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleDestination, null, options, request);
      }
      /// <summary>
      /// Ego 차량의 Cruise 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleEgoCruise(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleEgoCruise(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ego 차량의 Cruise 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleEgoCruise(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleEgoCruise, null, options, request);
      }
      /// <summary>
      /// Ego 차량의 Cruise 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleEgoCruiseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleEgoCruiseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ego 차량의 Cruise 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleEgoCruiseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleEgoCruise, null, options, request);
      }
      /// <summary>
      /// 차량의 Network 설정 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleNetwork(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleNetwork(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Network 설정 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleNetwork(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleNetwork, null, options, request);
      }
      /// <summary>
      /// 차량의 Network 설정 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleNetworkAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleNetworkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Network 설정 (단, 현재는 ROS 설정만 지원)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleNetworkAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleNetwork, null, options, request);
      }
      /// <summary>
      /// 차량의 Steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleSteer(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleSteer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleSteer(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleSteer, null, options, request);
      }
      /// <summary>
      /// 차량의 Steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleSteerAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleSteerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 Steer 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleSteerAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleSteer, null, options, request);
      }
      /// <summary>
      /// 차량의 제어 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleControlMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleControlMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 제어 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleControlMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleControlMode, null, options, request);
      }
      /// <summary>
      /// 차량의 제어 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleControlModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleControlModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 제어 모드 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleControlModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleControlMode, null, options, request);
      }
      /// <summary>
      /// 차량의 기어 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleGear(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleGear(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 기어 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleGear(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleGear, null, options, request);
      }
      /// <summary>
      /// 차량의 기어 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleGearAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleGearAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 기어 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleGearAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleGear, null, options, request);
      }
      /// <summary>
      /// 차량의 후미등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleTailLight(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleTailLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 후미등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVehicleTailLight(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVehicleTailLight, null, options, request);
      }
      /// <summary>
      /// 차량의 후미등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleTailLightAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVehicleTailLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 차량의 후미등 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVehicleTailLightAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVehicleTailLight, null, options, request);
      }
      /// <summary>
      /// Spawn한 보행자의 이동 경로 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetPedestrianWaypoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPedestrianWaypoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Spawn한 보행자의 이동 경로 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetPedestrianWaypoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPedestrianWaypoint, null, options, request);
      }
      /// <summary>
      /// Spawn한 보행자의 이동 경로 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPedestrianWaypointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPedestrianWaypointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Spawn한 보행자의 이동 경로 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetPedestrianWaypointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPedestrianWaypoint, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ActorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ActorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ActorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SpawnVehicle, serviceImpl.SpawnVehicle)
          .AddMethod(__Method_SpawnPedestrian, serviceImpl.SpawnPedestrian)
          .AddMethod(__Method_SpawnObstacle, serviceImpl.SpawnObstacle)
          .AddMethod(__Method_DestroyActor, serviceImpl.DestroyActor)
          .AddMethod(__Method_DestroyAllActors, serviceImpl.DestroyAllActors)
          .AddMethod(__Method_ControlVehicle, serviceImpl.ControlVehicle)
          .AddMethod(__Method_ControlPedestrian, serviceImpl.ControlPedestrian)
          .AddMethod(__Method_ControlObstacle, serviceImpl.ControlObstacle)
          .AddMethod(__Method_GetActorState, serviceImpl.GetActorState)
          .AddMethod(__Method_GetAllActorsState, serviceImpl.GetAllActorsState)
          .AddMethod(__Method_GetVehicleSpec, serviceImpl.GetVehicleSpec)
          .AddMethod(__Method_GetOptionName, serviceImpl.GetOptionName)
          .AddMethod(__Method_GetVehicleNetworkSetting, serviceImpl.GetVehicleNetworkSetting)
          .AddMethod(__Method_GetVehicleControlMode, serviceImpl.GetVehicleControlMode)
          .AddMethod(__Method_SetScale, serviceImpl.SetScale)
          .AddMethod(__Method_SetTransform, serviceImpl.SetTransform)
          .AddMethod(__Method_SetObstacleAnimation, serviceImpl.SetObstacleAnimation)
          .AddMethod(__Method_SetTrainSignalLight, serviceImpl.SetTrainSignalLight)
          .AddMethod(__Method_SetPause, serviceImpl.SetPause)
          .AddMethod(__Method_SetAI, serviceImpl.SetAI)
          .AddMethod(__Method_SetPhysics, serviceImpl.SetPhysics)
          .AddMethod(__Method_SetVelocity, serviceImpl.SetVelocity)
          .AddMethod(__Method_SetVehicleLimiter, serviceImpl.SetVehicleLimiter)
          .AddMethod(__Method_SetVehicleDynamicsSteer, serviceImpl.SetVehicleDynamicsSteer)
          .AddMethod(__Method_SetVehicleDynamicsSpeedLimit, serviceImpl.SetVehicleDynamicsSpeedLimit)
          .AddMethod(__Method_SetVehicleDynamicsMass, serviceImpl.SetVehicleDynamicsMass)
          .AddMethod(__Method_SetVehiclePathOffset, serviceImpl.SetVehiclePathOffset)
          .AddMethod(__Method_SetVehicleDisturbance, serviceImpl.SetVehicleDisturbance)
          .AddMethod(__Method_SetVehicleFaultInjection, serviceImpl.SetVehicleFaultInjection)
          .AddMethod(__Method_SetVehicleRoute, serviceImpl.SetVehicleRoute)
          .AddMethod(__Method_SetVehicleDestination, serviceImpl.SetVehicleDestination)
          .AddMethod(__Method_SetVehicleEgoCruise, serviceImpl.SetVehicleEgoCruise)
          .AddMethod(__Method_SetVehicleNetwork, serviceImpl.SetVehicleNetwork)
          .AddMethod(__Method_SetVehicleSteer, serviceImpl.SetVehicleSteer)
          .AddMethod(__Method_SetVehicleControlMode, serviceImpl.SetVehicleControlMode)
          .AddMethod(__Method_SetVehicleGear, serviceImpl.SetVehicleGear)
          .AddMethod(__Method_SetVehicleTailLight, serviceImpl.SetVehicleTailLight)
          .AddMethod(__Method_SetPedestrianWaypoint, serviceImpl.SetPedestrianWaypoint).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ActorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SpawnVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SpawnVehicle));
      serviceBinder.AddMethod(__Method_SpawnPedestrian, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SpawnPedestrian));
      serviceBinder.AddMethod(__Method_SpawnObstacle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleSpawnParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SpawnObstacle));
      serviceBinder.AddMethod(__Method_DestroyActor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.DestroyActor));
      serviceBinder.AddMethod(__Method_DestroyAllActors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.DestroyAllActors));
      serviceBinder.AddMethod(__Method_ControlVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.ControlVehicle));
      serviceBinder.AddMethod(__Method_ControlPedestrian, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.ControlPedestrian));
      serviceBinder.AddMethod(__Method_ControlObstacle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ObstacleCtrlCmd, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.ControlObstacle));
      serviceBinder.AddMethod(__Method_GetActorState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorState>(serviceImpl.GetActorState));
      serviceBinder.AddMethod(__Method_GetAllActorsState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.GetAllActorsFilter, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorStates>(serviceImpl.GetAllActorsState));
      serviceBinder.AddMethod(__Method_GetVehicleSpec, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSpec>(serviceImpl.GetVehicleSpec));
      serviceBinder.AddMethod(__Method_GetOptionName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue>(serviceImpl.GetOptionName));
      serviceBinder.AddMethod(__Method_GetVehicleNetworkSetting, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkProtocolSetting>(serviceImpl.GetVehicleNetworkSetting));
      serviceBinder.AddMethod(__Method_GetVehicleControlMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.CurVehicleControlMode>(serviceImpl.GetVehicleControlMode));
      serviceBinder.AddMethod(__Method_SetScale, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.ActorScale, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetScale));
      serviceBinder.AddMethod(__Method_SetTransform, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetTransformParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetTransform));
      serviceBinder.AddMethod(__Method_SetObstacleAnimation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.AnimationParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetObstacleAnimation));
      serviceBinder.AddMethod(__Method_SetTrainSignalLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.TrainSignalLightInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetTrainSignalLight));
      serviceBinder.AddMethod(__Method_SetPause, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetPause));
      serviceBinder.AddMethod(__Method_SetAI, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetAI));
      serviceBinder.AddMethod(__Method_SetPhysics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EnableActor, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetPhysics));
      serviceBinder.AddMethod(__Method_SetVelocity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.SetVelocityParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVelocity));
      serviceBinder.AddMethod(__Method_SetVehicleLimiter, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleLimiter, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleLimiter));
      serviceBinder.AddMethod(__Method_SetVehicleDynamicsSteer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSteer, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleDynamicsSteer));
      serviceBinder.AddMethod(__Method_SetVehicleDynamicsSpeedLimit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsSpeedLimit, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleDynamicsSpeedLimit));
      serviceBinder.AddMethod(__Method_SetVehicleDynamicsMass, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDynamicsMass, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleDynamicsMass));
      serviceBinder.AddMethod(__Method_SetVehiclePathOffset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehiclePathOffset, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehiclePathOffset));
      serviceBinder.AddMethod(__Method_SetVehicleDisturbance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDisturbance, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleDisturbance));
      serviceBinder.AddMethod(__Method_SetVehicleFaultInjection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleFaultInjection, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleFaultInjection));
      serviceBinder.AddMethod(__Method_SetVehicleRoute, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleRoute, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleRoute));
      serviceBinder.AddMethod(__Method_SetVehicleDestination, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleDestination, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleDestination));
      serviceBinder.AddMethod(__Method_SetVehicleEgoCruise, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.EgoCruiseControl, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleEgoCruise));
      serviceBinder.AddMethod(__Method_SetVehicleNetwork, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.NetworkConfig, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleNetwork));
      serviceBinder.AddMethod(__Method_SetVehicleSteer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleSteer, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleSteer));
      serviceBinder.AddMethod(__Method_SetVehicleControlMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleControlModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleControlMode));
      serviceBinder.AddMethod(__Method_SetVehicleGear, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleGear, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleGear));
      serviceBinder.AddMethod(__Method_SetVehicleTailLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.VehicleTailLight, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVehicleTailLight));
      serviceBinder.AddMethod(__Method_SetPedestrianWaypoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Actor.PedestrianWaypointInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetPedestrianWaypoint));
    }

  }
}
#endregion
