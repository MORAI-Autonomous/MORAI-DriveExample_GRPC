// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/environment/environment.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment {
  /// <summary>
  ///*
  /// 시뮬레이션 환경 관련 서비스
  /// </summary>
  public static partial class Environment
  {
    static readonly string __ServiceName = "morai_sim_api.environment.Environment";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> __Marshaller_morai_sim_api_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime> __Marshaller_morai_sim_api_environment_SimulationTime = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather> __Marshaller_morai_sim_api_environment_Weather = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season> __Marshaller_morai_sim_api_environment_Season = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue> __Marshaller_morai_sim_api_FloatValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility> __Marshaller_morai_sim_api_environment_EnvVisibility = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime> __Method_GetTime = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTime",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_environment_SimulationTime);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetTime = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTime",
        __Marshaller_morai_sim_api_environment_SimulationTime,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather> __Method_GetWeather = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWeather",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_environment_Weather);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetWeather = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetWeather",
        __Marshaller_morai_sim_api_environment_Weather,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season> __Method_GetSeason = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSeason",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_environment_Season);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetSeason = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSeason",
        __Marshaller_morai_sim_api_environment_Season,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue> __Method_GetRoadFriction = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRoadFriction",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_FloatValue);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetRoadFriction = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRoadFriction",
        __Marshaller_morai_sim_api_FloatValue,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetVisibility = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVisibility",
        __Marshaller_morai_sim_api_environment_EnvVisibility,
        __Marshaller_morai_sim_api_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvironmentReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Environment</summary>
    [grpc::BindServiceMethod(typeof(Environment), "BindService")]
    public abstract partial class EnvironmentBase
    {
      /// <summary>
      ///*
      /// 시뮬레이션 시간 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime> GetTime(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 시뮬레이션 시간 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTime(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 날씨 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather> GetWeather(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 날씨 설정
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetWeather(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 계절 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season> GetSeason(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 계절 변경
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSeason(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 도로면 마찰 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue> GetRoadFriction(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 도로면 마찰 변경
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetRoadFriction(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 맵 환경 요소 가시화
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVisibility(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Environment</summary>
    public partial class EnvironmentClient : grpc::ClientBase<EnvironmentClient>
    {
      /// <summary>Creates a new client for Environment</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EnvironmentClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Environment that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EnvironmentClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EnvironmentClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EnvironmentClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 시뮬레이션 시간 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime GetTime(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime GetTime(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTime, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime> GetTimeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime> GetTimeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTime, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTime(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTime(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTime, null, options, request);
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTimeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 시뮬레이션 시간 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTimeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTime, null, options, request);
      }
      /// <summary>
      ///*
      /// 날씨 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather GetWeather(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWeather(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 날씨 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather GetWeather(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWeather, null, options, request);
      }
      /// <summary>
      ///*
      /// 날씨 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather> GetWeatherAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWeatherAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 날씨 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather> GetWeatherAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWeather, null, options, request);
      }
      /// <summary>
      ///*
      /// 날씨 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetWeather(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWeather(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 날씨 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetWeather(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetWeather, null, options, request);
      }
      /// <summary>
      ///*
      /// 날씨 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetWeatherAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWeatherAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 날씨 설정
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetWeatherAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetWeather, null, options, request);
      }
      /// <summary>
      ///*
      /// 계절 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season GetSeason(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSeason(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 계절 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season GetSeason(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSeason, null, options, request);
      }
      /// <summary>
      ///*
      /// 계절 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season> GetSeasonAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSeasonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 계절 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season> GetSeasonAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSeason, null, options, request);
      }
      /// <summary>
      ///*
      /// 계절 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSeason(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSeason(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 계절 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSeason(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSeason, null, options, request);
      }
      /// <summary>
      ///*
      /// 계절 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSeasonAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSeasonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 계절 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSeasonAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSeason, null, options, request);
      }
      /// <summary>
      ///*
      /// 도로면 마찰 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue GetRoadFriction(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoadFriction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 도로면 마찰 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue GetRoadFriction(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRoadFriction, null, options, request);
      }
      /// <summary>
      ///*
      /// 도로면 마찰 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue> GetRoadFrictionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoadFrictionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 도로면 마찰 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue> GetRoadFrictionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRoadFriction, null, options, request);
      }
      /// <summary>
      ///*
      /// 도로면 마찰 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetRoadFriction(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRoadFriction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 도로면 마찰 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetRoadFriction(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRoadFriction, null, options, request);
      }
      /// <summary>
      ///*
      /// 도로면 마찰 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetRoadFrictionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRoadFrictionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 도로면 마찰 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetRoadFrictionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRoadFriction, null, options, request);
      }
      /// <summary>
      ///*
      /// 맵 환경 요소 가시화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVisibility(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVisibility(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 맵 환경 요소 가시화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetVisibility(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVisibility, null, options, request);
      }
      /// <summary>
      ///*
      /// 맵 환경 요소 가시화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVisibilityAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVisibilityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 맵 환경 요소 가시화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetVisibilityAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVisibility, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EnvironmentClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EnvironmentClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EnvironmentBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTime, serviceImpl.GetTime)
          .AddMethod(__Method_SetTime, serviceImpl.SetTime)
          .AddMethod(__Method_GetWeather, serviceImpl.GetWeather)
          .AddMethod(__Method_SetWeather, serviceImpl.SetWeather)
          .AddMethod(__Method_GetSeason, serviceImpl.GetSeason)
          .AddMethod(__Method_SetSeason, serviceImpl.SetSeason)
          .AddMethod(__Method_GetRoadFriction, serviceImpl.GetRoadFriction)
          .AddMethod(__Method_SetRoadFriction, serviceImpl.SetRoadFriction)
          .AddMethod(__Method_SetVisibility, serviceImpl.SetVisibility).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EnvironmentBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime>(serviceImpl.GetTime));
      serviceBinder.AddMethod(__Method_SetTime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.SimulationTime, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetTime));
      serviceBinder.AddMethod(__Method_GetWeather, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather>(serviceImpl.GetWeather));
      serviceBinder.AddMethod(__Method_SetWeather, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Weather, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetWeather));
      serviceBinder.AddMethod(__Method_GetSeason, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season>(serviceImpl.GetSeason));
      serviceBinder.AddMethod(__Method_SetSeason, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.Season, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetSeason));
      serviceBinder.AddMethod(__Method_GetRoadFriction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue>(serviceImpl.GetRoadFriction));
      serviceBinder.AddMethod(__Method_SetRoadFriction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.FloatValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetRoadFriction));
      serviceBinder.AddMethod(__Method_SetVisibility, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Environment.EnvVisibility, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetVisibility));
    }

  }
}
#endregion
