// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/map/map.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Map {
  /// <summary>
  /// 지도 관련 서비스
  /// </summary>
  public static partial class Map
  {
    static readonly string __ServiceName = "morai_sim_api.map.Map";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Marshaller_morai_sim_api_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData> __Marshaller_morai_sim_api_map_MGeoData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam> __Marshaller_morai_sim_api_map_GetNeighborLinkParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> __Marshaller_morai_sim_api_StringList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo> __Marshaller_morai_sim_api_map_LinkInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos> __Marshaller_morai_sim_api_ObjectInfos = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData> __Method_GetMGeo = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMGeo",
        __Marshaller_morai_sim_api_StringValue,
        __Marshaller_morai_sim_api_map_MGeoData);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> __Method_GetNeighborLink = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNeighborLink",
        __Marshaller_morai_sim_api_map_GetNeighborLinkParam,
        __Marshaller_morai_sim_api_StringList);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos> __Method_GetVehiclesOnLink = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehiclesOnLink",
        __Marshaller_morai_sim_api_map_LinkInfo,
        __Marshaller_morai_sim_api_ObjectInfos);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MapReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Map</summary>
    [grpc::BindServiceMethod(typeof(Map), "BindService")]
    public abstract partial class MapBase
    {
      /// <summary>
      ///*
      /// MGeo 데이터를 가져옴
      /// Extra scene map의 경우, "V_EXTRA_SCENE,맵이름" 으로 넣어야 한다.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData> GetMGeo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* 
      /// 주변 링크 정보를 가져옴
      /// 성공하면 링크 아이디, 실패하면 비어있는 문자열 리스트 리턴
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> GetNeighborLink(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 링크에 있는 차량 정보를 가져옴
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos> GetVehiclesOnLink(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Map</summary>
    public partial class MapClient : grpc::ClientBase<MapClient>
    {
      /// <summary>Creates a new client for Map</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MapClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Map that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MapClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MapClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MapClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// MGeo 데이터를 가져옴
      /// Extra scene map의 경우, "V_EXTRA_SCENE,맵이름" 으로 넣어야 한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData GetMGeo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMGeo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// MGeo 데이터를 가져옴
      /// Extra scene map의 경우, "V_EXTRA_SCENE,맵이름" 으로 넣어야 한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData GetMGeo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMGeo, null, options, request);
      }
      /// <summary>
      ///*
      /// MGeo 데이터를 가져옴
      /// Extra scene map의 경우, "V_EXTRA_SCENE,맵이름" 으로 넣어야 한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData> GetMGeoAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMGeoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// MGeo 데이터를 가져옴
      /// Extra scene map의 경우, "V_EXTRA_SCENE,맵이름" 으로 넣어야 한다.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData> GetMGeoAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMGeo, null, options, request);
      }
      /// <summary>
      ///* 
      /// 주변 링크 정보를 가져옴
      /// 성공하면 링크 아이디, 실패하면 비어있는 문자열 리스트 리턴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList GetNeighborLink(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNeighborLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* 
      /// 주변 링크 정보를 가져옴
      /// 성공하면 링크 아이디, 실패하면 비어있는 문자열 리스트 리턴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList GetNeighborLink(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNeighborLink, null, options, request);
      }
      /// <summary>
      ///* 
      /// 주변 링크 정보를 가져옴
      /// 성공하면 링크 아이디, 실패하면 비어있는 문자열 리스트 리턴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> GetNeighborLinkAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNeighborLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* 
      /// 주변 링크 정보를 가져옴
      /// 성공하면 링크 아이디, 실패하면 비어있는 문자열 리스트 리턴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> GetNeighborLinkAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNeighborLink, null, options, request);
      }
      /// <summary>
      ///*
      /// 링크에 있는 차량 정보를 가져옴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos GetVehiclesOnLink(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehiclesOnLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 링크에 있는 차량 정보를 가져옴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos GetVehiclesOnLink(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehiclesOnLink, null, options, request);
      }
      /// <summary>
      ///*
      /// 링크에 있는 차량 정보를 가져옴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos> GetVehiclesOnLinkAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehiclesOnLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 링크에 있는 차량 정보를 가져옴
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos> GetVehiclesOnLinkAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehiclesOnLink, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MapClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MapClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MapBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetMGeo, serviceImpl.GetMGeo)
          .AddMethod(__Method_GetNeighborLink, serviceImpl.GetNeighborLink)
          .AddMethod(__Method_GetVehiclesOnLink, serviceImpl.GetVehiclesOnLink).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MapBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetMGeo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.MGeoData>(serviceImpl.GetMGeo));
      serviceBinder.AddMethod(__Method_GetNeighborLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.GetNeighborLinkParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList>(serviceImpl.GetNeighborLink));
      serviceBinder.AddMethod(__Method_GetVehiclesOnLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Map.LinkInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfos>(serviceImpl.GetVehiclesOnLink));
    }

  }
}
#endregion
