// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/sensor/sensor.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor {
  /// <summary>
  ///*
  /// Sensor 관련 서비스
  /// </summary>
  public static partial class Sensor
  {
    static readonly string __ServiceName = "morai_sim_api.sensor.Sensor";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam> __Marshaller_morai_sim_api_sensor_AddSensorParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo> __Marshaller_morai_sim_api_sensor_SensorInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting> __Marshaller_morai_sim_api_sensor_SensorSetting = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData> __Marshaller_morai_sim_api_sensor_SensorData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig> __Marshaller_morai_sim_api_sensor_SensorDataSaveConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Marshaller_morai_sim_api_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo> __Marshaller_morai_sim_api_ObjectInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos> __Marshaller_morai_sim_api_sensor_SensorInfos = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam> __Marshaller_morai_sim_api_sensor_SensorCaptureModeParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier> __Marshaller_morai_sim_api_ObjectIdentifier = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_AddSensor = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSensor",
        __Marshaller_morai_sim_api_sensor_AddSensorParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_RemoveSensor = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveSensor",
        __Marshaller_morai_sim_api_sensor_SensorInfo,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetSensorSetting = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSensorSetting",
        __Marshaller_morai_sim_api_sensor_SensorSetting,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData> __Method_GetSensorData = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSensorData",
        __Marshaller_morai_sim_api_sensor_SensorInfo,
        __Marshaller_morai_sim_api_sensor_SensorData);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SaveSensorData = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveSensorData",
        __Marshaller_morai_sim_api_sensor_SensorDataSaveConfig,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_LoadSensorFile = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadSensorFile",
        __Marshaller_morai_sim_api_StringValue,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos> __Method_GetSensorInfos = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSensorInfos",
        __Marshaller_morai_sim_api_ObjectInfo,
        __Marshaller_morai_sim_api_sensor_SensorInfos);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetSensorCaptureMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSensorCaptureMode",
        __Marshaller_morai_sim_api_sensor_SensorCaptureModeParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_GetSensorCaptureMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSensorCaptureMode",
        __Marshaller_morai_sim_api_ObjectIdentifier,
        __Marshaller_morai_sim_api_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Sensor</summary>
    [grpc::BindServiceMethod(typeof(Sensor), "BindService")]
    public abstract partial class SensorBase
    {
      /// <summary>
      /// Install the sensor on the vehicle
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> AddSensor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove the sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> RemoveSensor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// set sensor setting (GT sensor only)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSensorSetting(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get sensor setting info (GT Sensor only)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData> GetSensorData(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Save all sensor settings to a file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SaveSensorData(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Load a preset sensor setup file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> LoadSensorFile(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List of Sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos> GetSensorInfos(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Turn on sensor capture mode 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSensorCaptureMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get sens
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> GetSensorCaptureMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Sensor</summary>
    public partial class SensorClient : grpc::ClientBase<SensorClient>
    {
      /// <summary>Creates a new client for Sensor</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Sensor that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Install the sensor on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result AddSensor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSensor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Install the sensor on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result AddSensor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSensor, null, options, request);
      }
      /// <summary>
      /// Install the sensor on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> AddSensorAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSensorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Install the sensor on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> AddSensorAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSensor, null, options, request);
      }
      /// <summary>
      /// Remove the sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result RemoveSensor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSensor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove the sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result RemoveSensor(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveSensor, null, options, request);
      }
      /// <summary>
      /// Remove the sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> RemoveSensorAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSensorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove the sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> RemoveSensorAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveSensor, null, options, request);
      }
      /// <summary>
      /// set sensor setting (GT sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSensorSetting(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSensorSetting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// set sensor setting (GT sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSensorSetting(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSensorSetting, null, options, request);
      }
      /// <summary>
      /// set sensor setting (GT sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSensorSettingAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSensorSettingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// set sensor setting (GT sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSensorSettingAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSensorSetting, null, options, request);
      }
      /// <summary>
      /// get sensor setting info (GT Sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData GetSensorData(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSensorData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get sensor setting info (GT Sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData GetSensorData(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSensorData, null, options, request);
      }
      /// <summary>
      /// get sensor setting info (GT Sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData> GetSensorDataAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSensorDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get sensor setting info (GT Sensor only)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData> GetSensorDataAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSensorData, null, options, request);
      }
      /// <summary>
      /// Save all sensor settings to a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SaveSensorData(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSensorData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save all sensor settings to a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SaveSensorData(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveSensorData, null, options, request);
      }
      /// <summary>
      /// Save all sensor settings to a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SaveSensorDataAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSensorDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Save all sensor settings to a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SaveSensorDataAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveSensorData, null, options, request);
      }
      /// <summary>
      /// Load a preset sensor setup file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result LoadSensorFile(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSensorFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Load a preset sensor setup file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result LoadSensorFile(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadSensorFile, null, options, request);
      }
      /// <summary>
      /// Load a preset sensor setup file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> LoadSensorFileAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSensorFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Load a preset sensor setup file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> LoadSensorFileAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadSensorFile, null, options, request);
      }
      /// <summary>
      /// List of Sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos GetSensorInfos(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSensorInfos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of Sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos GetSensorInfos(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSensorInfos, null, options, request);
      }
      /// <summary>
      /// List of Sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos> GetSensorInfosAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSensorInfosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List of Sensors installed on the vehicle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos> GetSensorInfosAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSensorInfos, null, options, request);
      }
      /// <summary>
      /// Turn on sensor capture mode 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSensorCaptureMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSensorCaptureMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Turn on sensor capture mode 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetSensorCaptureMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSensorCaptureMode, null, options, request);
      }
      /// <summary>
      /// Turn on sensor capture mode 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSensorCaptureModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSensorCaptureModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Turn on sensor capture mode 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetSensorCaptureModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSensorCaptureMode, null, options, request);
      }
      /// <summary>
      /// Get sens
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result GetSensorCaptureMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSensorCaptureMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get sens
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result GetSensorCaptureMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSensorCaptureMode, null, options, request);
      }
      /// <summary>
      /// Get sens
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> GetSensorCaptureModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSensorCaptureModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get sens
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> GetSensorCaptureModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSensorCaptureMode, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddSensor, serviceImpl.AddSensor)
          .AddMethod(__Method_RemoveSensor, serviceImpl.RemoveSensor)
          .AddMethod(__Method_SetSensorSetting, serviceImpl.SetSensorSetting)
          .AddMethod(__Method_GetSensorData, serviceImpl.GetSensorData)
          .AddMethod(__Method_SaveSensorData, serviceImpl.SaveSensorData)
          .AddMethod(__Method_LoadSensorFile, serviceImpl.LoadSensorFile)
          .AddMethod(__Method_GetSensorInfos, serviceImpl.GetSensorInfos)
          .AddMethod(__Method_SetSensorCaptureMode, serviceImpl.SetSensorCaptureMode)
          .AddMethod(__Method_GetSensorCaptureMode, serviceImpl.GetSensorCaptureMode).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SensorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddSensor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.AddSensorParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.AddSensor));
      serviceBinder.AddMethod(__Method_RemoveSensor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.RemoveSensor));
      serviceBinder.AddMethod(__Method_SetSensorSetting, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorSetting, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetSensorSetting));
      serviceBinder.AddMethod(__Method_GetSensorData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorData>(serviceImpl.GetSensorData));
      serviceBinder.AddMethod(__Method_SaveSensorData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorDataSaveConfig, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SaveSensorData));
      serviceBinder.AddMethod(__Method_LoadSensorFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.LoadSensorFile));
      serviceBinder.AddMethod(__Method_GetSensorInfos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectInfo, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorInfos>(serviceImpl.GetSensorInfos));
      serviceBinder.AddMethod(__Method_SetSensorCaptureMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Sensor.SensorCaptureModeParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetSensorCaptureMode));
      serviceBinder.AddMethod(__Method_GetSensorCaptureMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.GetSensorCaptureMode));
    }

  }
}
#endregion
