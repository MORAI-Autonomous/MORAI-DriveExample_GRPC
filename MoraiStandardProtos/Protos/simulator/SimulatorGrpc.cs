// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/simulator/simulator.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator {
  /// <summary>
  ///*
  /// MORAI SIM의 정보 확인을 위한 서비스
  /// </summary>
  public static partial class Simulator
  {
    static readonly string __ServiceName = "morai_sim_api.simualtor.Simulator";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> __Marshaller_morai_sim_api_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Marshaller_morai_sim_api_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> __Marshaller_morai_sim_api_Int64Value = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> __Marshaller_morai_sim_api_StringList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles> __Marshaller_morai_sim_api_simualtor_CategoryObstacles = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject> __Marshaller_morai_sim_api_simualtor_AvailableObject = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode> __Marshaller_morai_sim_api_simualtor_RenderingMode = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Method_GetSimulatorVersion = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSimulatorVersion",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_StringValue);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> __Method_GetTimestamp = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTimestamp",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_Int64Value);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> __Method_GetAvailableMaps = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAvailableMaps",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_StringList);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject> __Method_GetAvailableObject = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAvailableObject",
        __Marshaller_morai_sim_api_simualtor_CategoryObstacles,
        __Marshaller_morai_sim_api_simualtor_AvailableObject);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Method_GetDataPath = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataPath",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_StringValue);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetRenderingMode = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRenderingMode",
        __Marshaller_morai_sim_api_simualtor_RenderingMode,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> __Method_CheckLatency = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckLatency",
        __Marshaller_morai_sim_api_Empty,
        __Marshaller_morai_sim_api_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.SimulatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Simulator</summary>
    [grpc::BindServiceMethod(typeof(Simulator), "BindService")]
    public abstract partial class SimulatorBase
    {
      /// <summary>
      /// 시뮬레이터 버전 확인
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetSimulatorVersion(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 시뮬레이터의 Timestamp 확인
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> GetTimestamp(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 현재 사용자가 사용 가능한 맵 리스트 조회
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> GetAvailableMaps(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get Available Object matched to the user account info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject> GetAvailableObject(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 데이터 저장 경로 획득
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetDataPath(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 랜더링 모드 변경
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetRenderingMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// latency check
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> CheckLatency(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Simulator</summary>
    public partial class SimulatorClient : grpc::ClientBase<SimulatorClient>
    {
      /// <summary>Creates a new client for Simulator</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SimulatorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Simulator that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SimulatorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SimulatorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SimulatorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 시뮬레이터 버전 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue GetSimulatorVersion(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSimulatorVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 시뮬레이터 버전 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue GetSimulatorVersion(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSimulatorVersion, null, options, request);
      }
      /// <summary>
      /// 시뮬레이터 버전 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetSimulatorVersionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSimulatorVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 시뮬레이터 버전 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetSimulatorVersionAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSimulatorVersion, null, options, request);
      }
      /// <summary>
      /// 시뮬레이터의 Timestamp 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value GetTimestamp(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTimestamp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 시뮬레이터의 Timestamp 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value GetTimestamp(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTimestamp, null, options, request);
      }
      /// <summary>
      /// 시뮬레이터의 Timestamp 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> GetTimestampAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTimestampAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 시뮬레이터의 Timestamp 확인
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value> GetTimestampAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTimestamp, null, options, request);
      }
      /// <summary>
      /// 현재 사용자가 사용 가능한 맵 리스트 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList GetAvailableMaps(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableMaps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 현재 사용자가 사용 가능한 맵 리스트 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList GetAvailableMaps(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAvailableMaps, null, options, request);
      }
      /// <summary>
      /// 현재 사용자가 사용 가능한 맵 리스트 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> GetAvailableMapsAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableMapsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 현재 사용자가 사용 가능한 맵 리스트 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList> GetAvailableMapsAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAvailableMaps, null, options, request);
      }
      /// <summary>
      /// Get Available Object matched to the user account info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject GetAvailableObject(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Available Object matched to the user account info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject GetAvailableObject(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAvailableObject, null, options, request);
      }
      /// <summary>
      /// Get Available Object matched to the user account info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject> GetAvailableObjectAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Available Object matched to the user account info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject> GetAvailableObjectAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAvailableObject, null, options, request);
      }
      /// <summary>
      /// 데이터 저장 경로 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue GetDataPath(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataPath(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 데이터 저장 경로 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue GetDataPath(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataPath, null, options, request);
      }
      /// <summary>
      /// 데이터 저장 경로 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetDataPathAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataPathAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 데이터 저장 경로 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> GetDataPathAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataPath, null, options, request);
      }
      /// <summary>
      /// 랜더링 모드 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetRenderingMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRenderingMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 랜더링 모드 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetRenderingMode(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRenderingMode, null, options, request);
      }
      /// <summary>
      /// 랜더링 모드 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetRenderingModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRenderingModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 랜더링 모드 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetRenderingModeAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRenderingMode, null, options, request);
      }
      /// <summary>
      /// latency check
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty CheckLatency(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckLatency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// latency check
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty CheckLatency(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckLatency, null, options, request);
      }
      /// <summary>
      /// latency check
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> CheckLatencyAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckLatencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// latency check
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty> CheckLatencyAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckLatency, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SimulatorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SimulatorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SimulatorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSimulatorVersion, serviceImpl.GetSimulatorVersion)
          .AddMethod(__Method_GetTimestamp, serviceImpl.GetTimestamp)
          .AddMethod(__Method_GetAvailableMaps, serviceImpl.GetAvailableMaps)
          .AddMethod(__Method_GetAvailableObject, serviceImpl.GetAvailableObject)
          .AddMethod(__Method_GetDataPath, serviceImpl.GetDataPath)
          .AddMethod(__Method_SetRenderingMode, serviceImpl.SetRenderingMode)
          .AddMethod(__Method_CheckLatency, serviceImpl.CheckLatency).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SimulatorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetSimulatorVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue>(serviceImpl.GetSimulatorVersion));
      serviceBinder.AddMethod(__Method_GetTimestamp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Int64Value>(serviceImpl.GetTimestamp));
      serviceBinder.AddMethod(__Method_GetAvailableMaps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringList>(serviceImpl.GetAvailableMaps));
      serviceBinder.AddMethod(__Method_GetAvailableObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.CategoryObstacles, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.AvailableObject>(serviceImpl.GetAvailableObject));
      serviceBinder.AddMethod(__Method_GetDataPath, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue>(serviceImpl.GetDataPath));
      serviceBinder.AddMethod(__Method_SetRenderingMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Simulator.RenderingMode, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetRenderingMode));
      serviceBinder.AddMethod(__Method_CheckLatency, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Empty>(serviceImpl.CheckLatency));
    }

  }
}
#endregion
