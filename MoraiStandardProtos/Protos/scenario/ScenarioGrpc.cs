// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/scenario/scenario.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario {
  /// <summary>
  ///*
  /// 시나리오 관련 기능을 제공하는 서비스
  /// </summary>
  public static partial class Scenario
  {
    static readonly string __ServiceName = "morai_sim_api.scenario.Scenario";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue> __Marshaller_morai_sim_api_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam> __Marshaller_morai_sim_api_scenario_CreateVehicleSpawnPointParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam> __Marshaller_morai_sim_api_scenario_CreatePedestrianSpawnPointParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam> __Marshaller_morai_sim_api_scenario_EnableSpawnPointParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam> __Marshaller_morai_sim_api_scenario_CreateFrictionControlAreaParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_LoadMoraiScenario = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadMoraiScenario",
        __Marshaller_morai_sim_api_StringValue,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_CreateVehicleSpawnPoint = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateVehicleSpawnPoint",
        __Marshaller_morai_sim_api_scenario_CreateVehicleSpawnPointParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_CreatePedestrianSpawnPoint = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePedestrianSpawnPoint",
        __Marshaller_morai_sim_api_scenario_CreatePedestrianSpawnPointParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_EnableSpawnPoint = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableSpawnPoint",
        __Marshaller_morai_sim_api_scenario_EnableSpawnPointParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_CreateFrictionControlArea = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFrictionControlArea",
        __Marshaller_morai_sim_api_scenario_CreateFrictionControlAreaParam,
        __Marshaller_morai_sim_api_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.ScenarioReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Scenario</summary>
    [grpc::BindServiceMethod(typeof(Scenario), "BindService")]
    public abstract partial class ScenarioBase
    {
      /// <summary>
      /// MORAI SIM: Drive의 Built-in 시나리오 파일 로드
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> LoadMoraiScenario(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Vehicle Spawn Point 생성
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreateVehicleSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Pedestrian Spawn Point 생성
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreatePedestrianSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Spawn Point Enable/Disable
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> EnableSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 시나리오 객체 생성
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreateFrictionControlArea(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Scenario</summary>
    public partial class ScenarioClient : grpc::ClientBase<ScenarioClient>
    {
      /// <summary>Creates a new client for Scenario</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ScenarioClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Scenario that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ScenarioClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ScenarioClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ScenarioClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// MORAI SIM: Drive의 Built-in 시나리오 파일 로드
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result LoadMoraiScenario(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadMoraiScenario(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MORAI SIM: Drive의 Built-in 시나리오 파일 로드
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result LoadMoraiScenario(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadMoraiScenario, null, options, request);
      }
      /// <summary>
      /// MORAI SIM: Drive의 Built-in 시나리오 파일 로드
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> LoadMoraiScenarioAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadMoraiScenarioAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MORAI SIM: Drive의 Built-in 시나리오 파일 로드
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> LoadMoraiScenarioAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadMoraiScenario, null, options, request);
      }
      /// <summary>
      /// Vehicle Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result CreateVehicleSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVehicleSpawnPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Vehicle Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result CreateVehicleSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVehicleSpawnPoint, null, options, request);
      }
      /// <summary>
      /// Vehicle Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreateVehicleSpawnPointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVehicleSpawnPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Vehicle Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreateVehicleSpawnPointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVehicleSpawnPoint, null, options, request);
      }
      /// <summary>
      /// Pedestrian Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result CreatePedestrianSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePedestrianSpawnPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pedestrian Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result CreatePedestrianSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePedestrianSpawnPoint, null, options, request);
      }
      /// <summary>
      /// Pedestrian Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreatePedestrianSpawnPointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePedestrianSpawnPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pedestrian Spawn Point 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreatePedestrianSpawnPointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePedestrianSpawnPoint, null, options, request);
      }
      /// <summary>
      /// Spawn Point Enable/Disable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result EnableSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableSpawnPoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Spawn Point Enable/Disable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result EnableSpawnPoint(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableSpawnPoint, null, options, request);
      }
      /// <summary>
      /// Spawn Point Enable/Disable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> EnableSpawnPointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableSpawnPointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Spawn Point Enable/Disable
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> EnableSpawnPointAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableSpawnPoint, null, options, request);
      }
      /// <summary>
      /// 시나리오 객체 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result CreateFrictionControlArea(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFrictionControlArea(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 시나리오 객체 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result CreateFrictionControlArea(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFrictionControlArea, null, options, request);
      }
      /// <summary>
      /// 시나리오 객체 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreateFrictionControlAreaAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFrictionControlAreaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 시나리오 객체 생성
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> CreateFrictionControlAreaAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFrictionControlArea, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ScenarioClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ScenarioClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ScenarioBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LoadMoraiScenario, serviceImpl.LoadMoraiScenario)
          .AddMethod(__Method_CreateVehicleSpawnPoint, serviceImpl.CreateVehicleSpawnPoint)
          .AddMethod(__Method_CreatePedestrianSpawnPoint, serviceImpl.CreatePedestrianSpawnPoint)
          .AddMethod(__Method_EnableSpawnPoint, serviceImpl.EnableSpawnPoint)
          .AddMethod(__Method_CreateFrictionControlArea, serviceImpl.CreateFrictionControlArea).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ScenarioBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_LoadMoraiScenario, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.StringValue, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.LoadMoraiScenario));
      serviceBinder.AddMethod(__Method_CreateVehicleSpawnPoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateVehicleSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.CreateVehicleSpawnPoint));
      serviceBinder.AddMethod(__Method_CreatePedestrianSpawnPoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreatePedestrianSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.CreatePedestrianSpawnPoint));
      serviceBinder.AddMethod(__Method_EnableSpawnPoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.EnableSpawnPointParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.EnableSpawnPoint));
      serviceBinder.AddMethod(__Method_CreateFrictionControlArea, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Scenario.CreateFrictionControlAreaParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.CreateFrictionControlArea));
    }

  }
}
#endregion
