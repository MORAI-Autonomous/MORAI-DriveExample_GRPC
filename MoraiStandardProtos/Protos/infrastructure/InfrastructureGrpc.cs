// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: morai/infrastructure/infrastructure.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure {
  /// <summary>
  ///*
  /// 신호등, RSU(Road Side Unit)등 시뮬레이션 인프라의 상태를 조회하고 제어하는 기능
  /// </summary>
  public static partial class Infrastructure
  {
    static readonly string __ServiceName = "morai_sim_api.infrastructure.Infrastructure";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam> __Marshaller_morai_sim_api_infrastructure_GetTrafficLightInfoParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo> __Marshaller_morai_sim_api_infrastructure_TrafficLightInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam> __Marshaller_morai_sim_api_infrastructure_TrafficLightStateParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Marshaller_morai_sim_api_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier> __Marshaller_morai_sim_api_ObjectIdentifier = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState> __Marshaller_morai_sim_api_infrastructure_IntersectionState = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase> __Marshaller_morai_sim_api_infrastructure_IntersectionPhase = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase.Parser));
    static readonly grpc::Marshaller<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule> __Marshaller_morai_sim_api_infrastructure_IntersectionSchedule = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule.Parser));

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo> __Method_GetTrafficLightInfo = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTrafficLightInfo",
        __Marshaller_morai_sim_api_infrastructure_GetTrafficLightInfoParam,
        __Marshaller_morai_sim_api_infrastructure_TrafficLightInfo);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetTrafficLightState = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTrafficLightState",
        __Marshaller_morai_sim_api_infrastructure_TrafficLightStateParam,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState> __Method_GetIntersectionTLInfo = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIntersectionTLInfo",
        __Marshaller_morai_sim_api_ObjectIdentifier,
        __Marshaller_morai_sim_api_infrastructure_IntersectionState);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetIntersectionPhase = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIntersectionPhase",
        __Marshaller_morai_sim_api_infrastructure_IntersectionPhase,
        __Marshaller_morai_sim_api_Result);

    static readonly grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> __Method_SetIntersectionSchedule = new grpc::Method<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIntersectionSchedule",
        __Marshaller_morai_sim_api_infrastructure_IntersectionSchedule,
        __Marshaller_morai_sim_api_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.InfrastructureReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Infrastructure</summary>
    [grpc::BindServiceMethod(typeof(Infrastructure), "BindService")]
    public abstract partial class InfrastructureBase
    {
      /// <summary>
      /// 링크 또는 신호등의 아이디를 통해 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo> GetTrafficLightInfo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 신호등의 상태 변경
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTrafficLightState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 교차로 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState> GetIntersectionTLInfo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 교차로 phase 변경
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetIntersectionPhase(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 교차로 schedule 변경
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetIntersectionSchedule(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Infrastructure</summary>
    public partial class InfrastructureClient : grpc::ClientBase<InfrastructureClient>
    {
      /// <summary>Creates a new client for Infrastructure</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InfrastructureClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Infrastructure that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InfrastructureClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InfrastructureClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InfrastructureClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 링크 또는 신호등의 아이디를 통해 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo GetTrafficLightInfo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrafficLightInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 링크 또는 신호등의 아이디를 통해 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo GetTrafficLightInfo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTrafficLightInfo, null, options, request);
      }
      /// <summary>
      /// 링크 또는 신호등의 아이디를 통해 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo> GetTrafficLightInfoAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrafficLightInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 링크 또는 신호등의 아이디를 통해 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo> GetTrafficLightInfoAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTrafficLightInfo, null, options, request);
      }
      /// <summary>
      /// 신호등의 상태 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTrafficLightState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTrafficLightState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 신호등의 상태 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetTrafficLightState(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTrafficLightState, null, options, request);
      }
      /// <summary>
      /// 신호등의 상태 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTrafficLightStateAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTrafficLightStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 신호등의 상태 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetTrafficLightStateAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTrafficLightState, null, options, request);
      }
      /// <summary>
      /// 교차로 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState GetIntersectionTLInfo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIntersectionTLInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 교차로 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState GetIntersectionTLInfo(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIntersectionTLInfo, null, options, request);
      }
      /// <summary>
      /// 교차로 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState> GetIntersectionTLInfoAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIntersectionTLInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 교차로 신호등 상태 획득
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState> GetIntersectionTLInfoAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIntersectionTLInfo, null, options, request);
      }
      /// <summary>
      /// 교차로 phase 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetIntersectionPhase(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIntersectionPhase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 교차로 phase 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetIntersectionPhase(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIntersectionPhase, null, options, request);
      }
      /// <summary>
      /// 교차로 phase 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetIntersectionPhaseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIntersectionPhaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 교차로 phase 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetIntersectionPhaseAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIntersectionPhase, null, options, request);
      }
      /// <summary>
      /// 교차로 schedule 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetIntersectionSchedule(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIntersectionSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 교차로 schedule 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result SetIntersectionSchedule(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIntersectionSchedule, null, options, request);
      }
      /// <summary>
      /// 교차로 schedule 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetIntersectionScheduleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIntersectionScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 교차로 schedule 변경
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result> SetIntersectionScheduleAsync(global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIntersectionSchedule, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InfrastructureClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InfrastructureClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InfrastructureBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTrafficLightInfo, serviceImpl.GetTrafficLightInfo)
          .AddMethod(__Method_SetTrafficLightState, serviceImpl.SetTrafficLightState)
          .AddMethod(__Method_GetIntersectionTLInfo, serviceImpl.GetIntersectionTLInfo)
          .AddMethod(__Method_SetIntersectionPhase, serviceImpl.SetIntersectionPhase)
          .AddMethod(__Method_SetIntersectionSchedule, serviceImpl.SetIntersectionSchedule).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InfrastructureBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTrafficLightInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.GetTrafficLightInfoParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightInfo>(serviceImpl.GetTrafficLightInfo));
      serviceBinder.AddMethod(__Method_SetTrafficLightState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.TrafficLightStateParam, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetTrafficLightState));
      serviceBinder.AddMethod(__Method_GetIntersectionTLInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.ObjectIdentifier, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionState>(serviceImpl.GetIntersectionTLInfo));
      serviceBinder.AddMethod(__Method_SetIntersectionPhase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionPhase, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetIntersectionPhase));
      serviceBinder.AddMethod(__Method_SetIntersectionSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Infrastructure.IntersectionSchedule, global::CoreLib.Grpc.Protobuf.MoraiSimAPI.Result>(serviceImpl.SetIntersectionSchedule));
    }

  }
}
#endregion
